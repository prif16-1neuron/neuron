{"version":3,"sources":["images/Logo.png","Utils.js","TableManual.js","TableAuto.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data","x1","x2","w1","w2","y","t","Table","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","renderEditable","bind","assertThisInitialized","cellInfo","_this2","react_default","a","createElement","contentEditable","suppressContentEditableWarning","onBlur","e","toConsumableArray","index","column","id","target","innerHTML","i","length","temp","setState","dangerouslySetInnerHTML","__html","es","columns","Header","accessor","Cell","defaultPageSize","showPageSizeOptions","showPagination","sortable","resizable","style","border","Component","App","class","handleClick","className","src","logo","alt","onClick","TableManual","TableAuto","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d75e504.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.7fede0bd.png\";","//import React from \"react\";\r\n\r\n export const data = [\r\n    {\r\n      x1: 0,\r\n      x2: 0,\r\n      w1: 0.8,\r\n      w2: 0.4,\r\n      y: 0.33,\r\n      t: 0\r\n    },\r\n    {\r\n      x1: 0,\r\n      x2: 1,\r\n      w1: 0.3,\r\n      w2: 0.1,\r\n      y: 0.55,\r\n      t: 0\r\n    },\r\n    {\r\n      x1: 1,\r\n      x2: 0,\r\n      w1: -0.5,\r\n      w2: 0.4,\r\n      y: 0.9,\r\n      t: 1\r\n    },\r\n    {\r\n      x1: 1,\r\n      x2: 1,\r\n      w1: 0.2,\r\n      w2: -0.2,\r\n      y: 0.78,\r\n      t: 1\r\n    }\r\n  ];\r\n","import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport { data } from \"./Utils\";\r\n\r\nconst x0 = 1;\r\n\r\nclass Table extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: data\r\n    };\r\n    this.renderEditable = this.renderEditable.bind(this);\r\n  }\r\n  renderEditable(cellInfo) {\r\n    return (\r\n      <div\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          const data = [...this.state.data];\r\n          data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n          for (var i = 0; i < data.length; i++) {\r\n            var temp = data[i].x1 * data[i].w1 + data[i].x2 * data[i].w2 + x0;\r\n            //console.log(data[i]);\r\n            //console.log(temp);\r\n            if (temp >= 1) data[i].t = 1;\r\n            else data[i].t = 0;\r\n          }\r\n          this.setState({ data });\r\n        }}\r\n        dangerouslySetInnerHTML={{\r\n          __html: this.state.data[cellInfo.index][cellInfo.column.id]\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <ReactTable\r\n        data={data}\r\n        columns={[\r\n          {\r\n            Header: \"Input\",\r\n            columns: [\r\n              {\r\n                Header: \"X1\",\r\n                accessor: \"x1\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'},\r\n              },\r\n              {\r\n                Header: \"X2\",\r\n                accessor: \"x2\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              },\r\n              {\r\n                Header: \"W1\",\r\n                accessor: \"w1\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              },\r\n              {\r\n                Header: \"W2\",\r\n                accessor: \"w2\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            Header: \"Output\",\r\n            columns: [\r\n              {\r\n                Header: \"t\",\r\n                accessor: \"t\",\r\n                //style: {borderColor: 'white'}\r\n              }\r\n            ]\r\n          }\r\n        ]}\r\n        defaultPageSize={4}\r\n        showPageSizeOptions={false}\r\n        showPagination={false}\r\n        sortable={false}\r\n        resizable={false}\r\n        style={{\r\n          border: '1px solid white',\r\n          \r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport { data } from \"./Utils\";\r\n\r\nconst x0 = 1;\r\n\r\nclass Table extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: data\r\n    };\r\n    this.renderEditable = this.renderEditable.bind(this);\r\n  }\r\n  renderEditable(cellInfo) {\r\n    return (\r\n      <div\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          const data = [...this.state.data];\r\n          data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n          for (var i = 0; i < data.length; i++) {\r\n            var temp = data[i].x1 * data[i].w1 + data[i].x2 * data[i].w2 + x0;\r\n            //console.log(data[i]);\r\n            //console.log(temp);\r\n            if (temp >= 1) data[i].t = 1;\r\n            else data[i].t = 0;\r\n          }\r\n          this.setState({ data });\r\n        }}\r\n        dangerouslySetInnerHTML={{\r\n          __html: this.state.data[cellInfo.index][cellInfo.column.id]\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <ReactTable\r\n        data={data}\r\n        columns={[\r\n          {\r\n            Header: \"Input\",\r\n            columns: [\r\n              {\r\n                Header: \"X1\",\r\n                accessor: \"x1\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'},\r\n              },\r\n              {\r\n                Header: \"X2\",\r\n                accessor: \"x2\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              },\r\n              {\r\n                Header: \"W1\",\r\n                accessor: \"w1\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              },\r\n              {\r\n                Header: \"W2\",\r\n                accessor: \"w2\",\r\n                Cell: this.renderEditable,\r\n                //style: {borderColor: 'white'}\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            Header: \"Output\",\r\n            columns: [\r\n            {\r\n                Header: 'y',\r\n                accessor: 'y',\r\n            },\r\n              {\r\n                Header: \"t\",\r\n                accessor: \"t\",\r\n                //style: {borderColor: 'white'}\r\n              }\r\n            ]\r\n          }\r\n        ]}\r\n        defaultPageSize={4}\r\n        showPageSizeOptions={false}\r\n        showPagination={false}\r\n        sortable={false}\r\n        resizable={false}\r\n        style={{\r\n          border: '1px solid white',\r\n          \r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport logo from './images/Logo.png';\r\nimport './App.css';\r\nimport TableManual from './TableManual.js';\r\nimport TableAuto from './TableAuto.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      class: \"Button\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(){\r\n    const state = this.state.class;\r\n    (state === \"Button\" ? this.setState({class: \"Button-clicked\"}) : this.setState({class: \"Button\"}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} alt=\"\" className=\"App-logo\"/>\r\n          <button onClick={this.handleClick} className={this.state.class}>Manual <span>Auto</span></button>\r\n          <div>\r\n            {this.state.class === \"Button\" ? <TableManual /> : <TableAuto />}\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}